{"version":3,"sources":["ios-api-to-public-api-transform.tsx"],"names":["BehaviorSubject","iosAPIToPublicAPITransform","bringgDriverSdkIosType","addListenerToActiveTask","addListenerToLogout","activeCustomerManager","isLoggedInSubject","activeTaskSubject","updateIsLoggedInSubject","isLoggedInInitialValue","isLoggedIn","next","updateActiveTaskSubject","activeTask","getActiveTask","initBringgDriverSDK","flags","loginWithToken","token","secrect","region","error","arriveAtWaypointWithCustomerVehicle","customerVehicle","id","console","info","save_vehicle","license_plate","color","model","parking_spot","arriveAtWaypointWithCustomerVehicleAndVehicleId"],"mappings":"AAGA,SAASA,eAAT,QAAgC,MAAhC;AAIA;AACA,OAAO,SAASC,0BAAT,CACLC,sBADK,EAEgB;AACrB,QAAM;AAAEC,IAAAA,uBAAF;AAA2BC,IAAAA;AAA3B,MACJF,sBAAsB,CAACG,qBADzB;AAGA,QAAMC,iBAAiB,GAAG,IAAIN,eAAJ,CAA6B,KAA7B,CAA1B;AACA,QAAMO,iBAAiB,GAAG,IAAIP,eAAJ,CAAiC,IAAjC,CAA1B;;AAEA,QAAMQ,uBAAuB,GAAG,YAA2B;AACzD,UAAMC,sBAAsB,GAC1B,MAAMP,sBAAsB,CAACG,qBAAvB,CAA6CK,UAA7C,EADR;AAEAJ,IAAAA,iBAAiB,CAACK,IAAlB,CAAuBF,sBAAvB;AACD,GAJD;;AAMA,QAAMG,uBAAuB,GAAG,YAA2B;AACzD,UAAMC,UAAU,GACd,MAAMX,sBAAsB,CAACG,qBAAvB,CAA6CS,aAA7C,EADR;AAEAP,IAAAA,iBAAiB,CAACI,IAAlB,CAAuBE,UAAvB;AACD,GAJD;;AAMA,QAAME,mBAAmB,GAAG,MAC1BC,KAD0B,IAER;AAClB,UAAMd,sBAAsB,CAACa,mBAAvB,CAA2CC,KAA3C,aAA2CA,KAA3C,cAA2CA,KAA3C,GAAoD,IAApD,CAAN;AACA,UAAMR,uBAAuB,EAA7B;AACA,UAAMI,uBAAuB,EAA7B;AAEAR,IAAAA,mBAAmB,CAAC,MAAM;AACxBI,MAAAA,uBAAuB;AACxB,KAFkB,CAAnB;AAIAL,IAAAA,uBAAuB,CAAC,MAAM;AAC5BS,MAAAA,uBAAuB;AACxB,KAFsB,CAAvB;AAGD,GAdD;;AAgBA,QAAMP,qBAAgD,GAAG,EACvD,GAAGH,sBAAsB,CAACG,qBAD6B;AAEvDQ,IAAAA,UAAU,EAAEN,iBAF2C;AAGvDG,IAAAA,UAAU,EAAEJ,iBAH2C;AAIvDW,IAAAA,cAAc,EAAE,OACdC,KADc,EAEdC,OAFc,EAGdC,MAHc,KAII;AAClB,UAAI;AACF,cAAMlB,sBAAsB,CAACG,qBAAvB,CAA6CY,cAA7C,CACJC,KADI,EAEJC,OAFI,EAGJC,MAHI,CAAN;AAKA,cAAMZ,uBAAuB,EAA7B;AACD,OAPD,CAOE,OAAOa,KAAP,EAAc;AACd,cAAMb,uBAAuB,EAA7B;AACA,cAAMa,KAAN;AACD;AACF,KApBsD;AAqBvDC,IAAAA,mCAAmC,EAAE,MACnCC,eADmC,IAEjB;AAClB,UAAIA,eAAe,CAACC,EAAhB,IAAsB,IAA1B,EAAgC;AAC9BC,QAAAA,OAAO,CAACC,IAAR,CACE,6DADF;AAGA,eAAOxB,sBAAsB,CAACG,qBAAvB,CAA6CiB,mCAA7C,CACLC,eAAe,CAACI,YADX,EAELJ,eAAe,CAACK,aAFX,EAGLL,eAAe,CAACM,KAHX,EAILN,eAAe,CAACO,KAJX,EAKLP,eAAe,CAACQ,YALX,CAAP;AAOD,OAXD,MAWO;AACLN,QAAAA,OAAO,CAACC,IAAR,CAAa,0CAAb;AACA,eAAOxB,sBAAsB,CAACG,qBAAvB,CAA6C2B,+CAA7C,CACLT,eAAe,CAACC,EADX,EAELD,eAAe,CAACI,YAFX,EAGLJ,eAAe,CAACK,aAHX,EAILL,eAAe,CAACM,KAJX,EAKLN,eAAe,CAACO,KALX,EAMLP,eAAe,CAACQ,YANX,CAAP;AAQD;AACF;AA9CsD,GAAzD;AAgDA,SAAO;AAAEhB,IAAAA,mBAAF;AAAuBV,IAAAA;AAAvB,GAAP;AACD","sourcesContent":["import { BringgDriverSDKType, ActiveCustomerManagerType } from './index';\nimport { BringgDriverSdkIosType } from './ios';\nimport { Task } from './models/task';\nimport { BehaviorSubject } from 'rxjs';\nimport { SDKInitializeFlag } from './consts/SDKInitializeFlag';\nimport { CustomerVehicle } from './models/customer_vehicle';\n\n// Maps the iOS api to the public api (BringgDriverSdkIosType -> BringgDriverSDKType)\nexport function iosAPIToPublicAPITransform(\n  bringgDriverSdkIosType: BringgDriverSdkIosType\n): BringgDriverSDKType {\n  const { addListenerToActiveTask, addListenerToLogout } =\n    bringgDriverSdkIosType.activeCustomerManager;\n\n  const isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  const activeTaskSubject = new BehaviorSubject<Task | null>(null);\n\n  const updateIsLoggedInSubject = async (): Promise<void> => {\n    const isLoggedInInitialValue =\n      await bringgDriverSdkIosType.activeCustomerManager.isLoggedIn();\n    isLoggedInSubject.next(isLoggedInInitialValue);\n  };\n\n  const updateActiveTaskSubject = async (): Promise<void> => {\n    const activeTask =\n      await bringgDriverSdkIosType.activeCustomerManager.getActiveTask();\n    activeTaskSubject.next(activeTask);\n  };\n\n  const initBringgDriverSDK = async (\n    flags?: SDKInitializeFlag[]\n  ): Promise<void> => {\n    await bringgDriverSdkIosType.initBringgDriverSDK(flags ?? null);\n    await updateIsLoggedInSubject();\n    await updateActiveTaskSubject();\n\n    addListenerToLogout(() => {\n      updateIsLoggedInSubject();\n    });\n\n    addListenerToActiveTask(() => {\n      updateActiveTaskSubject();\n    });\n  };\n\n  const activeCustomerManager: ActiveCustomerManagerType = {\n    ...bringgDriverSdkIosType.activeCustomerManager,\n    activeTask: activeTaskSubject,\n    isLoggedIn: isLoggedInSubject,\n    loginWithToken: async (\n      token: string,\n      secrect: string,\n      region: string\n    ): Promise<void> => {\n      try {\n        await bringgDriverSdkIosType.activeCustomerManager.loginWithToken(\n          token,\n          secrect,\n          region\n        );\n        await updateIsLoggedInSubject();\n      } catch (error) {\n        await updateIsLoggedInSubject();\n        throw error;\n      }\n    },\n    arriveAtWaypointWithCustomerVehicle: async (\n      customerVehicle: CustomerVehicle\n    ): Promise<void> => {\n      if (customerVehicle.id == null) {\n        console.info(\n          'Arrive at waypoint with customer vehicle (empty vehicle id)'\n        );\n        return bringgDriverSdkIosType.activeCustomerManager.arriveAtWaypointWithCustomerVehicle(\n          customerVehicle.save_vehicle,\n          customerVehicle.license_plate,\n          customerVehicle.color,\n          customerVehicle.model,\n          customerVehicle.parking_spot\n        );\n      } else {\n        console.info('Arrive at waypoint with customer vehicle');\n        return bringgDriverSdkIosType.activeCustomerManager.arriveAtWaypointWithCustomerVehicleAndVehicleId(\n          customerVehicle.id,\n          customerVehicle.save_vehicle,\n          customerVehicle.license_plate,\n          customerVehicle.color,\n          customerVehicle.model,\n          customerVehicle.parking_spot\n        );\n      }\n    },\n  };\n  return { initBringgDriverSDK, activeCustomerManager };\n}\n"]}