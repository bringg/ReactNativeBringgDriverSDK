{"version":3,"sources":["ios.tsx"],"names":["getIOSNativeModule","BringgDriverSdk","ActiveCustomerManager","NativeModules","activeCustomerManagerEventEmitter","NativeEventEmitter","initBringgDriverSDK","activeCustomerManager","isLoggedIn","isLoggedInNumberValue","updateWaypointETA","eta","etaString","toISOString","getActiveTask","taskString","addListenerToActiveTask","listener","addListener","addListenerToLogout"],"mappings":";;;;;;;AAAA;;AAKA;;AA6CO,SAASA,kBAAT,GAAsD;AAC3D,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA6CC,0BAAnD;AACA,QAAMC,iCAAiC,GAAG,IAAIC,+BAAJ,CACxCH,qBADwC,CAA1C;AAIA,QAAMI,mBAEY,GAAGL,eAAe,CAACK,mBAFrC;AAIA,QAAMC,qBAAmD,GAAG,EAC1D,GAAGL,qBADuD;AAE1DM,IAAAA,UAAU,EAAE,YAA8B;AACxC,YAAMC,qBAA6B,GACjC,MAAMP,qBAAqB,CAACM,UAAtB,EADR;AAEA,aAAOC,qBAAqB,KAAK,CAA1B,GAA8B,IAA9B,GAAqC,KAA5C;AACD,KANyD;AAO1DC,IAAAA,iBAAiB,EAAGC,GAAD,IAA8B;AAC/C,YAAMC,SAAS,GAAGD,GAAG,CAACE,WAAJ,EAAlB;AACA,aAAOX,qBAAqB,CAACQ,iBAAtB,CAAwCE,SAAxC,CAAP;AACD,KAVyD;AAW1DE,IAAAA,aAAa,EAAE,YAAkC;AAC/C,YAAMC,UAAU,GAAG,MAAMb,qBAAqB,CAACY,aAAtB,EAAzB;AACA,aAAO,8BAAmBC,UAAnB,CAAP;AACD,KAdyD;AAe1DC,IAAAA,uBAAuB,EAAGC,QAAD,IAAc;AACrC,aAAOb,iCAAiC,CAACc,WAAlC,CACL,0CADK,EAELD,QAFK,CAAP;AAID,KApByD;AAqB1DE,IAAAA,mBAAmB,EAAGF,QAAD,IAAc;AACjC,aAAOb,iCAAiC,CAACc,WAAlC,CACL,gCADK,EAELD,QAFK,CAAP;AAID;AA1ByD,GAA5D;AA6BA,SAAO;AACLX,IAAAA,mBADK;AAELC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import {\n  NativeModules,\n  NativeEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { Task, taskFromJSONString } from './models/task';\nimport { TransportType } from './models/transport_type';\nimport { SDKInitializeFlag } from './consts/SDKInitializeFlag';\n\ntype ActiveCustomerManagerIOSType = {\n  // login related\n  isLoggedIn(): Promise<boolean>;\n  loginWithToken(token: string, secret: string, region: string): Promise<void>;\n  logout(): Promise<void>;\n\n  addListenerToLogout(listener: () => any): EmitterSubscription;\n\n  // task related\n  startTask(taskId: number): Promise<void>;\n  arriveAtWaypoint(): Promise<void>;\n  arriveAtWaypointWithCustomerVehicle(\n    saveVehicle: boolean,\n    licensePlate: String | null,\n    color: String | null,\n    model: String | null,\n    parkingSpot: String | null\n  ): Promise<void>;\n  arriveAtWaypointWithCustomerVehicleAndVehicleId(\n    vehicleId: number,\n    saveVehicle: boolean,\n    licensePlate: String | null,\n    color: String | null,\n    model: String | null,\n    parkingSpot: String | null\n  ): Promise<void>;\n  leaveWaypoint(): Promise<void>;\n  updateWaypointETA(eta: Date): Promise<void>;\n\n  getActiveTask(): Promise<Task | null>;\n\n  addListenerToActiveTask(listener: () => any): EmitterSubscription;\n\n  setUserTransportType(transportType: TransportType): Promise<void>;\n};\n\nexport type BringgDriverSdkIosType = {\n  initBringgDriverSDK(flags: SDKInitializeFlag[] | null): Promise<void>;\n  activeCustomerManager: ActiveCustomerManagerIOSType;\n};\n\nexport function getIOSNativeModule(): BringgDriverSdkIosType {\n  const { BringgDriverSdk, ActiveCustomerManager } = NativeModules;\n  const activeCustomerManagerEventEmitter = new NativeEventEmitter(\n    ActiveCustomerManager\n  );\n\n  const initBringgDriverSDK: (\n    flags: SDKInitializeFlag[] | null\n  ) => Promise<void> = BringgDriverSdk.initBringgDriverSDK;\n\n  const activeCustomerManager: ActiveCustomerManagerIOSType = {\n    ...ActiveCustomerManager,\n    isLoggedIn: async (): Promise<boolean> => {\n      const isLoggedInNumberValue: number =\n        await ActiveCustomerManager.isLoggedIn();\n      return isLoggedInNumberValue === 1 ? true : false;\n    },\n    updateWaypointETA: (eta: Date): Promise<void> => {\n      const etaString = eta.toISOString();\n      return ActiveCustomerManager.updateWaypointETA(etaString);\n    },\n    getActiveTask: async (): Promise<Task | null> => {\n      const taskString = await ActiveCustomerManager.getActiveTask();\n      return taskFromJSONString(taskString);\n    },\n    addListenerToActiveTask: (listener) => {\n      return activeCustomerManagerEventEmitter.addListener(\n        'activeCustomerManagerActiveTaskDidUpdate',\n        listener\n      );\n    },\n    addListenerToLogout: (listener) => {\n      return activeCustomerManagerEventEmitter.addListener(\n        'activeCustomerManagerDidLogout',\n        listener\n      );\n    },\n  };\n\n  return {\n    initBringgDriverSDK,\n    activeCustomerManager,\n  };\n}\n"]}